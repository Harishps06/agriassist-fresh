#!/usr/bin/env python3
"""
Fast AgriAssist Backend - Optimized for Speed
No PDF processing, instant responses
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import time
from datetime import datetime

app = Flask(__name__)

# Enable CORS for all domains
CORS(app, origins=[
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:3000",
    "http://127.0.0.1:3000"
])

# Pre-defined responses for instant answers
AGRICULTURAL_RESPONSES = {
    "rice": {
        "en": "Rice cultivation in Kerala: Plant during June-July (Kharif season). Use certified seeds, maintain proper water level (2-3 cm), apply fertilizers in 3 splits. Common varieties: Jyothi, Uma, Kanakom. Harvest in 120-140 days.",
        "ml": "‡¥ï‡µá‡¥∞‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥Ö‡¥∞‡¥ø ‡¥ï‡µÉ‡¥∑‡¥ø: ‡¥ú‡µÇ‡µ∫-‡¥ú‡µÇ‡¥≤‡µà ‡¥Æ‡¥æ‡¥∏‡¥ô‡µç‡¥ô‡¥≥‡¥ø‡µΩ ‡¥®‡¥ü‡µÅ‡¥ï. ‡¥∏‡µº‡¥ü‡µç‡¥ü‡¥ø‡¥´‡µà‡¥°‡µç ‡¥µ‡¥ø‡¥§‡µç‡¥§‡µÅ‡¥ï‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï, ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥ú‡¥≤‡¥®‡¥ø‡¥∞‡¥™‡µç‡¥™‡µç (2-3 ‡¥∏‡µÜ.‡¥Æ‡µÄ) ‡¥®‡¥ø‡¥≤‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥ï, ‡¥µ‡¥≥‡¥Ç 3 ‡¥≠‡¥æ‡¥ó‡¥ô‡µç‡¥ô‡¥≥‡¥æ‡¥Ø‡¥ø ‡¥ö‡µÜ‡¥≤‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï."
    },
    "coconut": {
        "en": "Coconut care: Plant 8x8m spacing, water regularly, apply organic manure. Common pests: Rhinoceros beetle, red palm weevil. Use neem oil for pest control. Harvest when nuts are 12 months old.",
        "ml": "‡¥§‡µÜ‡¥ô‡µç‡¥ô‡µç ‡¥™‡¥∞‡¥ø‡¥™‡¥æ‡¥≤‡¥®‡¥Ç: 8x8m ‡¥á‡¥ü‡¥µ‡µá‡¥≥‡¥Ø‡¥ø‡µΩ ‡¥®‡¥ü‡µÅ‡¥ï, ‡¥™‡¥§‡¥ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥ö‡µÜ‡¥≤‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï, ‡¥ú‡µà‡¥µ ‡¥µ‡¥≥‡¥Ç ‡¥ö‡µÜ‡¥≤‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï. ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥ï‡µÄ‡¥ü‡¥ô‡µç‡¥ô‡µæ: ‡¥ï‡µä‡¥Æ‡µç‡¥™‡µª ‡¥µ‡¥£‡µç‡¥ü‡µç, ‡¥ö‡µÅ‡¥µ‡¥®‡µç‡¥® ‡¥ï‡µÄ‡¥ü‡¥Ç."
    },
    "vegetables": {
        "en": "Vegetable farming tips: Use raised beds, proper spacing, regular watering. Common crops: Tomato, Brinjal, Okra, Green chili. Apply organic compost, use drip irrigation for water efficiency.",
        "ml": "‡¥™‡¥ö‡µç‡¥ö‡¥ï‡µç‡¥ï‡¥±‡¥ø ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥®‡µÅ‡¥±‡µÅ‡¥ô‡µç‡¥ô‡µÅ‡¥ï‡µæ: ‡¥â‡¥Ø‡µº‡¥®‡µç‡¥® ‡¥ï‡¥ü‡µç‡¥ü‡¥ø‡¥ï‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï, ‡¥∂‡¥∞‡¥ø‡¥Ø‡¥æ‡¥Ø ‡¥á‡¥ü‡¥µ‡µá‡¥≥, ‡¥™‡¥§‡¥ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç. ‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥µ‡¥ø‡¥≥‡¥ï‡µæ: ‡¥§‡¥ï‡µç‡¥ï‡¥æ‡¥≥‡¥ø, ‡¥µ‡¥¥‡µÅ‡¥§‡¥®, ‡¥µ‡µÜ‡¥£‡µç‡¥ü, ‡¥™‡¥ö‡µç‡¥ö‡¥Æ‡µÅ‡¥≥‡¥ï‡µç."
    },
    "pest": {
        "en": "Pest control: Use integrated pest management (IPM). Apply neem oil, use yellow sticky traps, encourage natural predators. Avoid excessive pesticide use. Monitor crops regularly.",
        "ml": "‡¥ï‡µÄ‡¥ü‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥£‡¥Ç: ‡¥∏‡¥Æ‡¥ó‡µç‡¥∞ ‡¥ï‡µÄ‡¥ü‡¥®‡¥ø‡¥Ø‡¥®‡µç‡¥§‡µç‡¥∞‡¥£‡¥Ç (IPM) ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥µ‡µá‡¥™‡µç‡¥™‡µÜ‡¥£‡µç‡¥£ ‡¥ö‡µÜ‡¥≤‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï, ‡¥Æ‡¥û‡µç‡¥û ‡¥ï‡µÅ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï, ‡¥™‡µç‡¥∞‡¥ï‡µÉ‡¥§‡¥ø ‡¥∂‡¥§‡µç‡¥∞‡µÅ‡¥ï‡µç‡¥ï‡¥≥‡µÜ ‡¥™‡µç‡¥∞‡µã‡¥§‡µç‡¥∏‡¥æ‡¥π‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
    },
    "weather": {
        "en": "Weather-based farming: Check weather forecast before planting. Monsoon (June-September) is best for rice. Summer (March-May) for vegetables. Use weather apps for daily updates.",
        "ml": "‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥Ö‡¥ü‡¥ø‡¥∏‡µç‡¥•‡¥æ‡¥® ‡¥ï‡µÉ‡¥∑‡¥ø: ‡¥®‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡µç ‡¥Æ‡µÅ‡¥Æ‡µç‡¥™‡µç ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Æ‡¥¥‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥Ç (‡¥ú‡µÇ‡µ∫-‡¥∏‡µÜ‡¥™‡µç‡¥±‡µç‡¥±‡¥Ç‡¥¨‡µº) ‡¥Ö‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥®‡¥≤‡µç‡¥≤‡¥§‡µç."
    }
}

def get_fast_response(query, language="en"):
    """Get instant response based on query keywords"""
    query_lower = query.lower()
    
    # Check for keywords and return relevant response
    if any(word in query_lower for word in ["rice", "arisi", "nellu", "‡¥Ö‡¥∞‡¥ø", "‡¥®‡µÜ‡¥≤‡µç‡¥≤‡µç"]):
        return AGRICULTURAL_RESPONSES["rice"].get(language, AGRICULTURAL_RESPONSES["rice"]["en"])
    
    elif any(word in query_lower for word in ["coconut", "thenga", "‡¥§‡µÜ‡¥ô‡µç‡¥ô‡µç", "coconut"]):
        return AGRICULTURAL_RESPONSES["coconut"].get(language, AGRICULTURAL_RESPONSES["coconut"]["en"])
    
    elif any(word in query_lower for word in ["vegetable", "pachakari", "‡¥™‡¥ö‡µç‡¥ö‡¥ï‡µç‡¥ï‡¥±‡¥ø", "veggie"]):
        return AGRICULTURAL_RESPONSES["vegetables"].get(language, AGRICULTURAL_RESPONSES["vegetables"]["en"])
    
    elif any(word in query_lower for word in ["pest", "kida", "‡¥ï‡µÄ‡¥ü‡¥Ç", "disease", "roga", "‡¥∞‡µã‡¥ó‡¥Ç"]):
        return AGRICULTURAL_RESPONSES["pest"].get(language, AGRICULTURAL_RESPONSES["pest"]["en"])
    
    elif any(word in query_lower for word in ["weather", "kalaavastha", "‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•", "rain", "mazha", "‡¥Æ‡¥¥"]):
        return AGRICULTURAL_RESPONSES["weather"].get(language, AGRICULTURAL_RESPONSES["weather"]["en"])
    
    else:
        # Default response
        if language == "ml":
            return f"‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç: {query}. ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥Ç‡¥¨‡¥®‡µç‡¥ß‡¥ø‡¥ö‡µç‡¥ö ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥µ‡¥ø‡¥¶‡¥ó‡µç‡¥ß‡¥∞‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥¨‡¥®‡µç‡¥ß‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥ï. ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥Ü‡¥∂‡¥Ø‡¥µ‡¥ø‡¥®‡¥ø‡¥Æ‡¥Ø ‡¥ï‡µá‡¥®‡µç‡¥¶‡µç‡¥∞‡¥Ç: 0471-2301861"
        else:
            return f"Thank you for your question: {query}. For more agricultural information, contact our experts. Krishi Call Center: 0471-2301861. This is a fast response from AgriAssist!"

@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        "status": "Fast Backend is running",
        "version": "1.0.0-fast",
        "timestamp": datetime.now().isoformat(),
        "features": ["Instant Responses", "No PDF Processing", "Optimized for Speed"]
    })

@app.route('/api/ask', methods=['POST'])
def ask_question():
    """Fast question answering endpoint"""
    try:
        data = request.get_json()
        query = data.get('query', '').strip()
        language = data.get('language', 'en')
        context = data.get('context', {})
        
        if not query:
            return jsonify({
                "answer": "Please provide a question.",
                "confidence": 0.0,
                "language": language,
                "responseTime": 0.001,
                "timestamp": datetime.now().isoformat()
            }), 400
        
        # Get instant response
        start_time = time.time()
        answer = get_fast_response(query, language)
        response_time = round(time.time() - start_time, 3)
        
        return jsonify({
            "answer": answer,
            "confidence": 0.95,
            "language": language,
            "responseTime": response_time,
            "timestamp": datetime.now().isoformat(),
            "sources": ["Fast Agricultural Knowledge Base"],
            "type": "instant_response"
        })
        
    except Exception as e:
        return jsonify({
            "answer": f"Error processing request: {str(e)}",
            "confidence": 0.0,
            "language": "en",
            "responseTime": 0.001,
            "timestamp": datetime.now().isoformat()
        }), 500

if __name__ == '__main__':
    print("üöÄ Starting FAST AgriAssist Backend Server...")
    print("‚ö° Optimized for instant responses")
    print("üåê Server starting on http://127.0.0.1:8888")
    print("üì± Frontend can now connect to this backend")
    print("‚ö° No PDF processing - instant responses!")
    
    app.run(debug=True, port=8888, host='0.0.0.0')
